---
import GitHub from "./icons/GitHub.astro"
import NextJS from "./icons/NextJS.astro"
import Tailwind from "./icons/Tailwind.astro"
import Link from "./icons/Link.astro"
import LinkButton from "./LinkButton.astro"
import Ruby from "./icons/Ruby.astro";
import Rspec from "./icons/Rspec.astro";
import Docker from "./icons/Docker.astro";
import Gitlab from "./icons/Gitlab.astro";
import Rails from "./icons/Rails.astro";
import React from "./icons/React.astro";
import SQS from "./icons/SQS.astro";
import Python from "./icons/Python.astro";
import Expo from "./icons/Expo.astro";
import { getLangFromUrl, useTranslations } from "@/i18n/utils"

type tLang = (str: any) => any;

const lang = getLangFromUrl(Astro.url)
const t:tLang = useTranslations(lang);

type TagType = {
  name: string;
  class: string;
  icon: (_props: Record<string, any>) => any;
};

type TagsType = {
  [key: string]: TagType;
};

const TAGS: TagsType = {
  nextjs: {
    name: "Next.js",
    class: "bg-black text-white",
    icon: NextJS
  },
  tailwindcss: {
    name: "Tailwind CSS",
    class: "bg-[#003159] text-white",
    icon: Tailwind
  },
  rspec: {
    name: "RSpec",
    class: "bg-white text-black",
    icon: Rspec
  },
  ruby: {
    name: "Ruby",
    class: "bg-white text-black",
    icon: Ruby
  },
  gitlab: {
    name: "GitLab",
    class: "bg-white text-black",
    icon: Gitlab
  },
  rails: {
    name: "Rails",
    class: "bg-white text-black",
    icon: Rails
  },
  docker: {
    name: "Docker",
    class: "bg-white text-black",
    icon: Docker
  },
  react: {
    name: "React",
    class: "bg-white text-black",
    icon: React
  },
  sqs: {
    name: "SQS",
    class: "bg-white text-black",
    icon: SQS,
  },
  python: {
    name: "Python",
    class: "bg-white text-black",
    icon: Python
  },
  expo: {
    name: "Expo",
    class: "bg-white text-black",
    icon: Expo
  }
};

interface ProjectType {
  image: string;
  imageAlt: string;
  title: string;
  description: string;
  tags: string[];
  link?: string;
  github?: string;
}
const PROJECTS:ProjectType[] = t('projects');
---

<div class="flex flex-col gap-y-16">
  {
    PROJECTS.map(({ image, title, description, tags, link, github }) => (
  <article class="flex flex-col space-x-0 space-y-8 group md:flex-row md:space-x-8 md:space-y-0">
  <div class="w-full">
    <h3 class="text-2xl font-bold text-gray-800 dark:text-gray-100">
      {title}
    </h3>
    <div class="flex flex-wrap mt-2">
      <ul class="flex flex-wrap mb-2 gap-x-2">
        {tags.map((item) => {
          const tag:TagType = TAGS[item];
          if(tag) {
            return (
              <li>
                <span
                  class={`flex gap-x-2 mt-2 rounded-full text-xs ${tag.class} py-1 px-2 `}
                >
                  <tag.icon class="size-4" />{tag.name}
                </span>
              </li>
            )
          }
        })}
      </ul>

      <div class="mt-2 text-gray-700 dark:text-gray-400">{description}</div>
      <footer class="flex items-end justify-start mt-4 gap-x-4">
          {github && (
            <LinkButton href={github}>
              <GitHub class="size-6" />
              {t("projects.code")}
              
            </LinkButton>
          )}
          {link && (
            <LinkButton href={link}>
              <Link class="size-4" />
              {t("projects.preview")}
            </LinkButton>
          )}
        </footer>
    </div>
  </div>
</article>
    ))
  }
</div>